generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  userName  String   @unique
  firstName String
  lastName  String
  email     String   @unique
  password  String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles UserRole[]
  bookings  Booking[]
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    String
  date        DateTime
  venue       String
  price       Float
  image       String?
  isOpen      Boolean  @default(true)
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    Booking[]
}

model Role {
  id       Int      @id @default(autoincrement())
  roleName String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  userRoles UserRole[]
}

model UserRole {
  userId Int
  roleId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Booking {
  id          Int      @id @default(autoincrement())
  userId      Int
  eventId     Int
  quantity    Int
  bookingDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, bookingDate])
}
